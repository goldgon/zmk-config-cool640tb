// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "keycode_japanese.h"

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};




// 複数キーの同時押しに特別の入力を設定できる
    // キー番号早見表：
    // 0  1  2  3  4           5  6  7  8  9
    // 10 11 12 13 14          15 16 17 18 19
    // 20 21 22 23 24          25 26 27 28 29 
    // 30 31 32 33 34          35 36 37 38 39

/ {
    combos {
        compatible = "zmk,combos";

        fopen {
            bindings = <&kp LG(N2)>;
            key-positions = <8 9>;
            layers = <0>;
            timeout-ms = <50>;
        };

       bootloader {
            bindings = <&bootloader>;
            key-positions = <0 9 30 39>;
            timeout-ms = <50>;
        };


        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp CAPS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        eq {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <8 9>;
            layers = <2>;
        };


    };



    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE          &kp Q        &kp E      &kp U         &kp P                                    &kp D        &kp T         &kp R       &kp W       &mkp MB1

&mt LSHIFT TAB      &kp O        &kp A      &kp I         &mt LCTRL F                              &mt RCTRL H  &kp Y         &kp K       &kp S       &mt LEFT_SHIFT B

&mt LCTRL PERIOD    &mt LGUI X   &mt LALT C &mt LSHIFT V  &kp L                                    &kp N       &mt RSHIFT M  &mt RALT G  &mt RGUI J  &mt RCTRL Z

&none              &none         &none      &none         &mo 1                                      &mo 2      &none     &none       &none        &none
            >;
        };

        FUNCTION {
            bindings = <
&kp N1           &kp N2       &kp N3            &kp N4        &kp N5                   &kp N6         &kp N7        &kp N8                &kp N9                 &kp N0

&kp JP_LT  &kp JP_LBKT  &kp LS(0x25)  &kp SPACE  &kp MINUS                             &kp BACKSPACE &kp ENTER     &kp JP_RPAR  &kp JP_RBKT  &kp JP_RT

&kp END     &kp PAGE_DOWN &kp DOWN     &kp LEFT   &none                                 &kp DELETE     &kp RIGHT    &kp UP_ARROW &kp PAGE_UP  &kp HOME 

&none           &none       &none  &none  &none                                        &kp GRAVE      &none  &none                 &none                 &none
            >;
        };

        NUM {
            bindings = <
&kp 0x38  &kp AT_SIGN    &kp HASH   &kp DOLLAR     &kp PERCENT                  &kp CARET       &kp LS(SEMI)  &kp ASTERISK       &kp SLASH          &mkp MB2

&kp COMMA      &kp JP_SEMI    &kp JP_AT     &kp RS(MINUS)  &kp MINUS                    &kp LS(SLASH)       &kp EQUAL     &kp DOUBLE_QUOTES  &kp LS(0x87)  &kp LS(0x1e)

&kp PERIOD     &kp JP_COLON  &kp UNDER  &kp UNDER      &trans                       &kp UNDERSCORE  &kp PLUS      &trans             &trans             &kp BACKSLASH

&none       &none   &none   &none   &none                                         &none          &none    &none   &none           &none
            >;
        };


    };
};
