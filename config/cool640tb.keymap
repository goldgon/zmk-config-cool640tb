// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "keycode_japanese.h"

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};




// 複数キーの同時押しに特別の入力を設定できる
    // キー番号早見表：
    // 0  1  2  3  4           5  6  7  8  9
    // 10 11 12 13 14          15 16 17 18 19
    // 20 21 22 23 24          25 26 27 28 29 
    // 30 31 32 33 34          35 36 37 38 39

/ {
    combos {
        compatible = "zmk,combos";

        fopen {
            bindings = <&kp LG(N2)>;
            key-positions = <8 9>;
            layers = <0>;
            timeout-ms = <50>;
        };

       bootloader {
            bindings = <&bootloader>;
            key-positions = <0 9 30 39>;
            timeout-ms = <50>;
        };


        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp CAPS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        eq {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <8 9>;
            layers = <2>;
        };


    };



    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE          &kp Q        &kp E      &kp U         &kp P                                    &kp D        &kp T         &kp R       &kp W       &mkp MB1

&mt LSHIFT TAB      &kp O        &kp A      &kp I         &mt LCTRL F                              &mt RCTRL H  &kp Y         &kp K       &kp S       &mt LEFT_SHIFT B

&mt LCTRL PERIOD    &mt LGUI X   &mt LALT C &mt LSHIFT V  &kp L                                    &kp N       &mt RSHIFT M  &mt RALT G  &mt RGUI J  &mt RCTRL Z

&none              &none         &none      &none         &mo 1                                      &mo 2      &none     &none       &none        &none
            >;
        };

        FUNCTION {
            bindings = <
&kp N1           &kp N2       &kp N3            &kp N4        &kp N5                   &kp N6         &kp N7        &kp N8                &kp N9                 &kp N0

&kp JP_LT  &kp JP_LBKT  &kp LS(0x25)  &kp SPACE  &kp MINUS                             &kp BACKSPACE &kp ENTER     &kp JP_RPAR  &kp JP_RBKT  &kp JP_RT

&kp END     &kp PAGE_DOWN &kp DOWN     &kp LEFT   &none                                 &kp DELETE     &kp RIGHT    &kp UP_ARROW &kp PAGE_UP  &kp HOME 

&none           &none       &none  &none  &none                                        &kp GRAVE      &none  &none                 &none                 &none
            >;
        };

        NUM {
            bindings = <
&kp F1       &kp F2   &kp F3             &kp F4         &kp F5          &kp F6         &kp F7          &kp F8          &kp F9           &kp F10
&kp AT_SIGN  &kp SQT  &kp DOUBLE_QUOTES  &kp SEMICOLON  &kp COLON       &kp LEFT       &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT        &kp ENTER
&kp Z        &kp X    &kp C              &kp V          &kp B           &kp LC(SPACE)  &kp RG(SPACE)   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp SLASH
&kp N1       &kp N2   &kp LEFT_CONTROL   &kp LEFT_GUI   &kp UNDERSCORE  &none          &kp LEFT_ALT    &kp BACKSPACE   &kp N3           &mo 4
            >;
        };

        ARROW {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2      &kp R         &kp T            &kp Y     &kp U         &kp I      &kp O       &kp P
&kp A         &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp H     &kp J         &kp K      &kp L       &kp ENTER
&kp Z         &kp X           &kp C             &kp V         &kp B            &kp N     &kp M         &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
&kp N1        &kp N2          &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1         &mkp MB2  &kp LEFT_ALT  &to 0      &kp N3      &kp N4
            >;
        };

        MOUSE {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T     &kp Y     &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G     &kp H     &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B     &kp N     &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1  &mkp MB2  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &mo 0
            >;
        };

        SCROLL {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };

        layer_6 {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };
    };
};
